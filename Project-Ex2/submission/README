dans
Dan Shumayev (207050691)
EX: 2


FILES:
README - This file.
Makefile - Build file, the default target makes the entire library.
uthreads.h/cpp       - The provided thread library interface, implemented
                       by invoking various methods of the Scheduler singleton.
Scheduler.h/cpp - The main module managing the library threads. This is a singleton class.
thread.h/cpp - Representing a user-thread library, containing some of threads' information
               such as its id, env and stack.
uthread_utilities.h/cpp   - Utility functionality like timer masking and typedef's, error-related information.


REMARKS:

- The code is heavily commented.


ANSWERS:

1. It avoids the overhead that accompanies kernel-level threads which are managed by the kernel.
    The disadvantage of such multi-threading is that the kernel has to handle the scheduling of the threads,
    and actually the entire state machine. As mentioned, it includes many system calls which causes trap,
    which is an overhead we've seen in Ex.1. Examples of using user-level threads: Graphic processing unit (frame as
    a thread); Green Threads.

2.  - Disadvantages:
    * "Waste of memory": As each process has its own process sections (text, stack, data, heap), many running processes
        implies much more memory consumption than would have been with kernel-level threads which shares some of these
        sections.

    * Inter-Process Communication overhead: Following the previous con, we see that processes can't share data, but
        by signals/shared files - which are mechanisms that are delivered by the kernel. This is the exact caveat -
        going through the kernel requires interrupting the currently running process (system call),
        in order to let the kernel transfer the signal to the destined process. This overhead is expensive.

   - Advantages:
   * Independent preemption/termination: One process's termination doesn't affect the other's, no matter what the cause is.
        If some tab is lagged/crashed, that won't effect the others' processing function, because they're isolated and
        independent. In contrast to that, in kernel-level threads, it would terminate all the tabs, as they're one
        crashing process.

   * Security: As each process has its own sections, and its own memory in particular, that's safer. That's safer because
            we can be unworried they are intervening with each other's data, race-conditioning some shared data, possibly
            resulting in defected values. Moreover, if some malicious attacker hijacks an active session held by one of
            the processes - it won't help him (essentially avoids) hijack the other processes' active sessions as they're
            isolated as described.


3. c. While pressing keyboard keys, the keyboard controller raises an interrupt
      to allow the CPU to handle the input. This interrupt halts the currently
      execution of the CPU -> the CPU traps into the kernel (kernel mode)
      -> performs a lookup of the suitable routine pointer which is destined to
      handle this hardware interrupt (which is detected by the respective controller's wires).
      The lookup table is called IVT - interrupt vector table. -> the CPU jumps into
      this routine pointer, and executes it, processing the pressed keys from the
      keyboard's memory segment as needed.

      These captured keys are displayed on the shell, as it's the currently focused program
      (as detected by the kernel). The shell processes and gets these keys by durable
      `select`ing the STDIN file (the above kernel routine is writing the captured keys
      to this file). The shell is "constantly reading" STDIN and is essentially blocking
      on it only when new key presses are detected on focus, via the `select` and
      `read` system calls. These respective characters are written into STDOUT
      * Extension: how is a key press mapped to its respective graphical character:
          1. Kernel talks to the USB controller hardware, identifies that you have a device connected,
          2. queries the device, detects the fact that it's a HID (human interface device),
          3. queries the keys and the format that the device is able to report according to the HID specification,
          4. sets the keyboard up to report key press events on the bus and starts polling it.
          5. While pressing a key, the keyboard reports it according to the reported HID format.
          6. Kernel receives the event from the controller hardware,
          7. parses the event according to previously negotiated format and translates into scan codes.
          8. Certain window manager sets up an even listener on the USB device and asks the kernel to deliver him.
          9. Kernel forwards key presses to the window manager.
          10. Window manager forwards key presses over to the currently focused application,
                i.e our shell in a window manager protocol specific manner.
          11. Our shell sees that's a key press, converts that into its ascii code.
          12. Shell runs some renderer code that is able to render fonts with some backend, aka OpenGL.
          13. OpenGL renderer creates a command buffer necessary to render said character.
          14. Renderer submits the command buffer to the GPU via a DRM kernel call.
          15. GPU receives the commands and draws to our shell window buffer.
          16. Shell tells the window manager that it's updated itself and wants to be shown on screen.
          17. Window manager submits the window to the compositor for redraw.
          18. Compositor layouts the windows according to their coordinates and applies various effects.
          19. Finally the window manager submits the final command buffer that draws composited windows into framebuffer
          20. Kernel DRM module presents the said framebuffer on the screen via the DRM subsystem according to
                selected planes/connectors/encoders

      The kill system call: When entering the command `kill <PID-NUMBER>`, a newline arrives at STDIN, causes the
      shell to call the `kill` system call with the first argument as `<PID-NUMBER>`, and the second is the macro for
      `SIGTERM` signal (which is the default one). This system call leads to a SIGTERM signal arriving at the passed
      pid number.

      Now, if the signaled process has registered an handler for SIGTERM - it'll execute it at its execution turn.
      Otherwise, the default signal handler is terminating it.

4. Real time takes into account the "human-known" time, which among other things, takes into account daylight saving
   time. It's essential for public applications such as websites displaying the current time to the users.

   Virtual time is the time dedicated only to execute a specific process's instructions,
   without the time spent on interrupts/blocks/preemption (hardware interrupt, system call, etc...).
   This type of time is useful for protocol benchmarks like measuring network protocols' throughput/bandwidth.
   We are interested in such benchmarks only in the time spent conducting the protocol related stuff, and not the system
   ones. Of course, it was also used by our user-level threads library, to let each thread run *its instructions* for
   a specific amount of time.

5. Describe what the functions `sigsetjmp` and `siglongjmp` do.

   `sigsetjmp` - this function receives a `sigjmp_buf` struct variable that is to contain several fields destined to
       hold our the current thread's context (e.g. the  stack pointer, the instruction pointer, possibly the values
                                     of other registers and the signal mask if the second argument passed is nonzero).
   `siglongjmp` - this function receives `sigjmp_buf` struct variable (`env`) holding a thread's context as mentioned a
        bove, and another value functioning as an indicator. The effect of this call transfers the control  back  to
            the  point where `sigsetjmp` was called with this `env` and restores (among other things) the stack to its
                state at the time of calling `sigsetjmp`. The second argument passed to this function is a non-zero
                    value that indicates when we got back from to the thread from which we called `sigsetjmp` previously.
